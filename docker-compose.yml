services:
  nginx:
    image: nginx:1.27-alpine
    container_name: colibri_nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot
    depends_on:
      - api

  certbot:
    image: certbot/certbot
    container_name: colibri_certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot

  api:
    build: .
    container_name: colibri_api
    restart: always
    env_file: .env
    ports:
      - '${PORT:-3000}:3000'
    # garanta que seu entrypoint roda as migrations antes de iniciar
    # entrypoint: ["/app/entrypoint.sh", "node", "dist/src/main.js"]
    depends_on:
      - db
      - redis

  db:
    image: postgres:16-alpine
    container_name: colibri_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: colibri_redis
    restart: always
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data

  redis_exporter:
    image: oliver006/redis_exporter
    container_name: colibri_redis_exporter
    restart: always
    command: --redis.addr=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - redis

  prometheus:
    image: prom/prometheus
    container_name: colibri_prometheus
    restart: always
    ports:
      - '9290:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - redis_exporter

  alertmanager:
    image: prom/alertmanager
    container_name: colibri_alertmanager
    restart: always
    ports:
      - '9193:9093'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager

  grafana:
    image: grafana/grafana
    container_name: colibri_grafana
    restart: always
    ports:
      - '3002:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  seeder:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: colibri_seeder
    env_file: .env
    command: ['pnpm', 'run', 'prisma:seed']
    depends_on:
      - db

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  alertmanager_data:
  grafana_data:
  certbot-etc:
  certbot-var:
