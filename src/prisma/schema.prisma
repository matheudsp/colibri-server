generator client {
  provider = "prisma-client-js"
  seed     = "ts-node src/prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMIN
  LOCADOR
  LOCATARIO
}

enum ContractStatus {
  PENDENTE_DOCUMENTACAO
  EM_ANALISE
  AGUARDANDO_ASSINATURAS
  ATIVO
  FINALIZADO
  CANCELADO
}

enum GuaranteeType {
  DEPOSITO_CAUCAO
  FIADOR
  SEGURO_FIANCA
  SEM_GARANTIA
}

enum DocumentType {
  IDENTIDADE_FRENTE
  IDENTIDADE_VERSO
  CPF
  COMPROVANTE_RENDA
  COMPROVANTE_ENDERECO
  CONTRATO_ALUGUEL
}

enum PaymentStatus {
  PENDENTE
  PAGO
  ATRASADO
  ISENTO
}

// --- MODELS ---

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  cpf       String    @unique
  phone     String?
  birthDate DateTime?
  role      UserRole  @default(LOCATARIO)
  status    Boolean   @default(true)

  cep    String?
  street String?
  number String?
  city   String?
  state  String?

  propertiesOwned     Property[] @relation("LandlordProperties")
  contractsAsLandlord Contract[] @relation("LandlordContracts")
  contractsAsTenant   Contract[] @relation("TenantContracts")
  documents           Document[]
  logs                Log[]
}

model Property {
  id           String  @id @default(uuid())
  title        String
  description  String? @db.Text
  cep          String
  street       String
  number       String
  complement   String?
  district     String
  city         String
  state        String
  areaInM2     Float
  numRooms     Int     @default(0)
  numBathrooms Int     @default(0)
  numParking   Int     @default(0)
  isAvailable  Boolean @default(true)

  landlordId String
  landlord   User       @relation("LandlordProperties", fields: [landlordId], references: [id])
  contracts  Contract[]
  photos     Photo[]
}

model Contract {
  id               String         @id @default(uuid())
  status           ContractStatus @default(PENDENTE_DOCUMENTACAO)
  rentAmount       Float
  condoFee         Float?
  iptuFee          Float?
  startDate        DateTime
  endDate          DateTime
  durationInMonths Int
  guaranteeType    GuaranteeType  @default(SEM_GARANTIA)
  securityDeposit  Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  landlordId String
  landlord   User   @relation("LandlordContracts", fields: [landlordId], references: [id])

  tenantId String
  tenant   User   @relation("TenantContracts", fields: [tenantId], references: [id])

  payments  Payment[]
  documents Document[]
}

model Payment {
  id         String        @id @default(uuid())
  contractId String
  amountDue  Float
  amountPaid Float?
  dueDate    DateTime
  paidAt     DateTime?
  status     PaymentStatus @default(PENDENTE)
  contract   Contract      @relation(fields: [contractId], references: [id])
}

model Photo {
  id          String   @id @default(uuid())
  filePath    String
  description String?
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
}

model Document {
  id         String       @id @default(uuid())
  type       DocumentType
  filePath   String
  status     String       @default("PENDENTE")
  userId     String?
  user       User?        @relation(fields: [userId], references: [id])
  contractId String?
  contract   Contract?    @relation(fields: [contractId], references: [id])
  uploadedAt DateTime     @default(now())
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String
  targetId  String
  tableName String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
