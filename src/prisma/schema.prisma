generator client {
  provider = "prisma-client-js"
  seed     = "ts-node src/prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMIN
  LOCADOR
  LOCATARIO
}

enum BankAccountType {
  CONTA_CORRENTE
  CONTA_POUPANCA
}

enum CompanyType {
  MEI
  LIMITED
  INDIVIDUAL
  ASSOCIATION
}

enum ContractStatus {
  PENDENTE_DOCUMENTACAO
  EM_ANALISE
  AGUARDANDO_ASSINATURAS
  ATIVO
  FINALIZADO
  CANCELADO
}

enum PdfType {
  CONTRATO_LOCACAO
}

enum GuaranteeType {
  DEPOSITO_CAUCAO
  FIADOR
  SEGURO_FIANCA
  SEM_GARANTIA
}

enum DocumentType {
  IDENTIDADE_FRENTE
  IDENTIDADE_VERSO
  CPF
  COMPROVANTE_RENDA
  COMPROVANTE_ENDERECO
}

enum DocumentStatus {
  REPROVADO
  AGUARDANDO_APROVACAO
  APROVADO
}

enum PaymentStatus {
  PENDENTE
  PAGO
  ATRASADO
  ISENTO
  CONFIRMADO
  FALHOU
  CANCELADO
}

// --- MODELS ---

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  cpfCnpj         String   @unique
  phone           String
  role            UserRole @default(LOCATARIO)
  status          Boolean  @default(true)
  asaasCustomerId String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  birthDate   DateTime?    @db.Date
  companyType CompanyType?
  incomeValue Decimal?

  cep        String?
  street     String?
  number     String?
  city       String?
  state      String?
  province   String?
  complement String?

  condominiums        Condominium[]      @relation("LandlordCondominiums")
  propertiesOwned     Property[]         @relation("LandlordProperties")
  contractsAsLandlord Contract[]         @relation("LandlordContracts")
  contractsAsTenant   Contract[]         @relation("TenantContracts")
  logs                Log[]
  webhooks            Webhook[]
  bankAccount         BankAccount?
  subAccount          SubAccount?
  asaasCustomers      AsaasCustomer[]    @relation("TenantAsaasCustomers")
  signatureRequests   SignatureRequest[]
}

model SubAccount {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  asaasWalletId     String?         @unique
  asaasAccountId    String          @unique
  apiKey            String
  asaasWebhookToken String?         @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  AsaasCustomer     AsaasCustomer[]
}

model AsaasCustomer {
  id              String @id @default(uuid())
  tenantId        String
  subaccountId    String
  asaasCustomerId String @unique

  tenant     User       @relation("TenantAsaasCustomers", fields: [tenantId], references: [id])
  subAccount SubAccount @relation(fields: [subaccountId], references: [id])

  createdAt DateTime @default(now())

  @@unique([tenantId, subaccountId])
}

model BankAccount {
  id     String @id @default(uuid())
  userId String @unique

  bank        String
  agency      String
  account     String
  accountType BankAccountType

  pixKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Webhook {
  id         String   @id @default(uuid())
  name       String
  url        String
  email      String
  sendType   String
  apiVersion Int      @default(3)
  authToken  String?
  enabled    Boolean  @default(true)
  events     String[]
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Condominium {
  id   String @id @default(uuid())
  name String

  cep      String
  street   String
  number   String
  district String
  city     String
  state    String

  landlordId String
  landlord   User   @relation("LandlordCondominiums", fields: [landlordId], references: [id])

  properties Property[]
}

model Property {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  rentValue   Decimal

  cep      String?
  street   String?
  district String?
  city     String?
  state    String?

  number     String
  complement String?

  areaInM2     Float
  numRooms     Int     @default(0)
  numBathrooms Int     @default(0)
  numParking   Int     @default(0)
  isAvailable  Boolean @default(true)

  condominiumId String?
  condominium   Condominium? @relation(fields: [condominiumId], references: [id], onDelete: Cascade)

  landlordId String
  landlord   User   @relation("LandlordProperties", fields: [landlordId], references: [id])

  contracts Contract[]
  photos    Photo[]
}

model Contract {
  id               String         @id @default(uuid())
  status           ContractStatus @default(PENDENTE_DOCUMENTACAO)
  rentAmount       Decimal
  condoFee         Decimal?
  iptuFee          Decimal?
  startDate        DateTime
  endDate          DateTime
  durationInMonths Int
  guaranteeType    GuaranteeType  @default(SEM_GARANTIA)
  securityDeposit  Decimal?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  landlordId String
  landlord   User   @relation("LandlordContracts", fields: [landlordId], references: [id])

  tenantId String
  tenant   User   @relation("TenantContracts", fields: [tenantId], references: [id])

  paymentsOrders PaymentOrder[]
  documents      Document[]
  GeneratedPdf   GeneratedPdf[]
}

model GeneratedPdf {
  id                   String             @id @default(uuid())
  filePath             String
  pdfType              PdfType
  generatedAt          DateTime
  signedFilePath       String?
  clicksignDocumentKey String?            @unique
  contractId           String
  contract             Contract           @relation(fields: [contractId], references: [id])
  signatureRequests    SignatureRequest[]
}

model SignatureRequest {
  id                  String @id @default(uuid())
  requestSignatureKey String @unique

  generatedPdfId String
  generatedPdf   GeneratedPdf @relation(fields: [generatedPdfId], references: [id], onDelete: Cascade)

  signerId String
  user     User   @relation(fields: [signerId], references: [id])

  createdAt DateTime @default(now())
}

model PaymentOrder {
  id           String         @id @default(uuid())
  contractId   String
  amountDue    Decimal
  amountPaid   Decimal?
  dueDate      DateTime       @default(now()) @db.Date
  paidAt       DateTime?      @db.Date
  status       PaymentStatus  @default(PENDENTE)
  contract     Contract       @relation(fields: [contractId], references: [id], onDelete: Cascade)
  bankSlip     BankSlip?
  PaymentSplit PaymentSplit[]
}

model PaymentSplit {
  id        String  @id @default(uuid())
  paymentId String
  recipient String // subconta destino (ex: asaasWalletId ou id da plataforma)
  amount    Decimal
  type      String // FIXED ou PERCENTUAL

  payment PaymentOrder @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model BankSlip {
  id             String       @id @default(uuid())
  paymentOrderId String       @unique
  asaasChargeId  String       @unique
  bankSlipUrl    String
  invoiceUrl     String
  nossoNumero    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paymentOrder   PaymentOrder @relation(fields: [paymentOrderId], references: [id], onDelete: Cascade)
}

model Photo {
  id         String   @id @default(uuid())
  filePath   String
  name       String?
  isCover    Boolean  @default(false)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Document {
  id         String         @id @default(uuid())
  type       DocumentType
  filePath   String
  status     DocumentStatus @default(AGUARDANDO_APROVACAO)
  contractId String
  contract   Contract       @relation(fields: [contractId], references: [id], onDelete: Cascade)
  uploadedAt DateTime       @default(now())
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String
  targetId  String
  tableName String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
