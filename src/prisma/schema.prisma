generator client {
  provider = "prisma-client-js"
  seed     = "ts-node src/prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---

enum UserRole {
  ADMIN
  LOCADOR
  LOCATARIO
}

enum BankAccountType {
  CONTA_CORRENTE
  CONTA_POUPANCA
}

enum CompanyType {
  MEI
  LIMITED
  INDIVIDUAL
  ASSOCIATION
}

enum ContractStatus {
  PENDENTE_DOCUMENTACAO
  EM_ANALISE
  AGUARDANDO_ASSINATURAS
  ATIVO
  FINALIZADO
  CANCELADO
}

enum GuaranteeType {
  DEPOSITO_CAUCAO
  FIADOR
  SEGURO_FIANCA
  SEM_GARANTIA
}

enum DocumentType {
  IDENTIDADE_FRENTE
  IDENTIDADE_VERSO
  CPF
  COMPROVANTE_RENDA
  COMPROVANTE_ENDERECO
  CONTRATO_ALUGUEL
}

enum DocumentStatus {
  REPROVADO
  AGUARDANDO_APROVACAO
  APROVADO
}

enum PaymentStatus {
  PENDENTE
  PAGO
  ATRASADO
  ISENTO
  CONFIRMADO
  FALHOU
  CANCELADO
}

// --- MODELS ---

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  cpfCnpj         String   @unique
  phone           String?
  role            UserRole @default(LOCATARIO)
  status          Boolean  @default(true)
  asaasCustomerId String?  @unique

  asaasSubAccountId String?      @unique // ID da subconta no Asaas
  birthDate         DateTime?    @db.Date
  companyType       CompanyType?
  incomeValue       Decimal?

  cep      String?
  street   String?
  number   String?
  city     String?
  state    String?
  province String?

  condominiums        Condominium[] @relation("LandlordCondominiums")
  propertiesOwned     Property[]    @relation("LandlordProperties")
  contractsAsLandlord Contract[]    @relation("LandlordContracts")
  contractsAsTenant   Contract[]    @relation("TenantContracts")
  documents           Document[]
  logs                Log[]
  webhooks            Webhook[]
  bankAccount         BankAccount?
}

model BankAccount {
  id     String @id @default(uuid())
  userId String @unique

  bank          String
  agency        String
  account       String
  accountType   BankAccountType
  asaasWalletId String?         @unique
  pixKey        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Webhook {
  id         String   @id @default(uuid())
  name       String
  url        String
  email      String
  sendType   String
  apiVersion Int      @default(3)
  authToken  String?
  enabled    Boolean  @default(true)
  events     String[]
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Condominium {
  id   String @id @default(uuid())
  name String

  cep      String
  street   String
  number   String
  district String
  city     String
  state    String

  landlordId String
  landlord   User   @relation("LandlordCondominiums", fields: [landlordId], references: [id])

  properties Property[]
}

model Property {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text

  cep      String?
  street   String?
  district String?
  city     String?
  state    String?

  number     String
  complement String?

  areaInM2     Float
  numRooms     Int     @default(0)
  numBathrooms Int     @default(0)
  numParking   Int     @default(0)
  isAvailable  Boolean @default(true)

  condominiumId String?
  condominium   Condominium? @relation(fields: [condominiumId], references: [id])

  landlordId String
  landlord   User   @relation("LandlordProperties", fields: [landlordId], references: [id])

  contracts Contract[]
  photos    Photo[]
}

model Contract {
  id               String         @id @default(uuid())
  status           ContractStatus @default(PENDENTE_DOCUMENTACAO)
  rentAmount       Decimal
  condoFee         Decimal?
  iptuFee          Decimal?
  startDate        DateTime
  endDate          DateTime
  durationInMonths Int
  guaranteeType    GuaranteeType  @default(SEM_GARANTIA)
  securityDeposit  Decimal?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  landlordId String
  landlord   User   @relation("LandlordContracts", fields: [landlordId], references: [id])

  tenantId String
  tenant   User   @relation("TenantContracts", fields: [tenantId], references: [id])

  paymentsOrders PaymentOrder[]
  documents      Document[]
}

model PaymentOrder {
  id           String         @id @default(uuid())
  contractId   String
  amountDue    Decimal
  amountPaid   Decimal?
  dueDate      DateTime       @default(now()) @db.Date
  paidAt       DateTime?      @default(now()) @db.Date
  status       PaymentStatus  @default(PENDENTE)
  contract     Contract       @relation(fields: [contractId], references: [id])
  boleto       Boleto?
  PaymentSplit PaymentSplit[]
}

model PaymentSplit {
  id        String  @id @default(uuid())
  paymentId String
  recipient String // subconta destino (ex: asaasWalletId ou id da plataforma)
  amount    Decimal
  type      String // FIXED ou PERCENTUAL

  payment PaymentOrder @relation(fields: [paymentId], references: [id])
}

model Boleto {
  id             String       @id @default(uuid())
  paymentOrderId String       @unique
  asaasChargeId  String       @unique
  bankSlipUrl    String
  invoiceUrl     String
  nossoNumero    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paymentOrder   PaymentOrder @relation(fields: [paymentOrderId], references: [id])
}

model Photo {
  id          String   @id @default(uuid())
  filePath    String
  description String?
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
}

model Document {
  id         String         @id @default(uuid())
  type       DocumentType
  filePath   String
  status     DocumentStatus @default(AGUARDANDO_APROVACAO)
  userId     String?
  user       User?          @relation(fields: [userId], references: [id])
  contractId String?
  contract   Contract?      @relation(fields: [contractId], references: [id])
  uploadedAt DateTime       @default(now())
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  action    String
  targetId  String
  tableName String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
